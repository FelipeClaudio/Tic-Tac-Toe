<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="117" failures="0" errors="0" time="2.569">
  <testsuite name="Restart button creation creation" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.13" tests="6">
    <testcase classname="Restart button creation creation It should create correct button." name="Restart button creation creation It should create correct button." time="0.008">
    </testcase>
    <testcase classname="Restart button creation creation It should only allow functions as parameter." name="Restart button creation creation It should only allow functions as parameter." time="0.004">
    </testcase>
    <testcase classname="Restart button creation creation It should only allow functions as parameter." name="Restart button creation creation It should only allow functions as parameter." time="0.001">
    </testcase>
    <testcase classname="Restart button creation creation It should only allow functions as parameter." name="Restart button creation creation It should only allow functions as parameter." time="0.001">
    </testcase>
    <testcase classname="Restart button creation creation It should only allow functions as parameter." name="Restart button creation creation It should only allow functions as parameter." time="0">
    </testcase>
    <testcase classname="On click even handling It should call passed function." name="On click even handling It should call passed function." time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Player creation" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.13" tests="11">
    <testcase classname="Player creation it should return previously set symbol." name="Player creation it should return previously set symbol." time="0.002">
    </testcase>
    <testcase classname="Player creation it should return previously set symbol." name="Player creation it should return previously set symbol." time="0">
    </testcase>
    <testcase classname="Player creation it should return previously set symbol." name="Player creation it should return previously set symbol." time="0">
    </testcase>
    <testcase classname="Player creation it should return previously set symbol." name="Player creation it should return previously set symbol." time="0">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0.005">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0.003">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0.001">
    </testcase>
    <testcase classname="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." name="Player creation it should not allow symbols different from &apos;X&apos; and &apos;O&apos;." time="0">
    </testcase>
  </testsuite>
  <testsuite name="Game History Display creation" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.15" tests="15">
    <testcase classname="Game History Display creation It should return previously set symbol." name="Game History Display creation It should return previously set symbol." time="0.006">
    </testcase>
    <testcase classname="Set Game History It should set game history correctly when valid game history is provided." name="Set Game History It should set game history correctly when valid game history is provided." time="0.009">
    </testcase>
    <testcase classname="Set Game History It should set game history correctly when valid game history is provided." name="Set Game History It should set game history correctly when valid game history is provided." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should set game history correctly when valid game history is provided." name="Set Game History It should set game history correctly when valid game history is provided." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when null or undefined game history is provided." name="Set Game History It should throw exception when null or undefined game history is provided." time="0.004">
    </testcase>
    <testcase classname="Set Game History It should throw exception when null or undefined game history is provided." name="Set Game History It should throw exception when null or undefined game history is provided." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with null or empty field." name="Set Game History It should throw exception when trying to set game history with null or empty field." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with null or empty field." name="Set Game History It should throw exception when trying to set game history with null or empty field." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with null or empty field." name="Set Game History It should throw exception when trying to set game history with null or empty field." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with non integer fields." name="Set Game History It should throw exception when trying to set game history with non integer fields." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with non integer fields." name="Set Game History It should throw exception when trying to set game history with non integer fields." time="0">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with non integer fields." name="Set Game History It should throw exception when trying to set game history with non integer fields." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with negative integer fields." name="Set Game History It should throw exception when trying to set game history with negative integer fields." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with negative integer fields." name="Set Game History It should throw exception when trying to set game history with negative integer fields." time="0.001">
    </testcase>
    <testcase classname="Set Game History It should throw exception when trying to set game history with negative integer fields." name="Set Game History It should throw exception when trying to set game history with negative integer fields." time="0">
    </testcase>
  </testsuite>
  <testsuite name="Element creation" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.149" tests="14">
    <testcase classname="Element creation It should create valid element." name="Element creation It should create valid element." time="0.007">
    </testcase>
    <testcase classname="Element creation It should create valid element." name="Element creation It should create valid element." time="0">
    </testcase>
    <testcase classname="Element creation It should create valid element." name="Element creation It should create valid element." time="0.004">
    </testcase>
    <testcase classname="Element creation It should not create element if id is not contained in [0, 9] interval." name="Element creation It should not create element if id is not contained in [0, 9] interval." time="0.007">
    </testcase>
    <testcase classname="Element creation It should not create element if id is not contained in [0, 9] interval." name="Element creation It should not create element if id is not contained in [0, 9] interval." time="0">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0.001">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0.001">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0.001">
    </testcase>
    <testcase classname="Element creation It should not create element if it is not an integer." name="Element creation It should not create element if it is not an integer." time="0">
    </testcase>
    <testcase classname="On click even handling It should call passed function." name="On click even handling It should call passed function." time="0.002">
    </testcase>
    <testcase classname="Set player mark It should set valid mark." name="Set player mark It should set valid mark." time="0.005">
    </testcase>
    <testcase classname="Set player mark It should set valid mark." name="Set player mark It should set valid mark." time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Validate Function" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.184" tests="32">
    <testcase classname="Validate Function It should not throw exception when valid function is provided." name="Validate Function It should not throw exception when valid function is provided." time="0.002">
    </testcase>
    <testcase classname="Validate Function It should throw exception when argument is not a function." name="Validate Function It should throw exception when argument is not a function." time="0.004">
    </testcase>
    <testcase classname="Validate Function It should throw exception when argument is not a function." name="Validate Function It should throw exception when argument is not a function." time="0">
    </testcase>
    <testcase classname="Validate Function It should throw exception when argument is not a function." name="Validate Function It should throw exception when argument is not a function." time="0.001">
    </testcase>
    <testcase classname="Validate Function It should throw exception when argument is not a function." name="Validate Function It should throw exception when argument is not a function." time="0">
    </testcase>
    <testcase classname="Validate String it should not throw exception when valid string is provided." name="Validate String it should not throw exception when valid string is provided." time="0">
    </testcase>
    <testcase classname="Validate String it should not throw exception when valid string is provided." name="Validate String it should not throw exception when valid string is provided." time="0">
    </testcase>
    <testcase classname="Validate String it should not throw exception when empty string is provided with &apos;allowEmptyString&apos; parameter as true." name="Validate String it should not throw exception when empty string is provided with &apos;allowEmptyString&apos; parameter as true." time="0">
    </testcase>
    <testcase classname="Validate String It should throw exception when argument is not a string." name="Validate String It should throw exception when argument is not a string." time="0">
    </testcase>
    <testcase classname="Validate String It should throw exception when argument is not a string." name="Validate String It should throw exception when argument is not a string." time="0">
    </testcase>
    <testcase classname="Validate String It should throw exception when argument is not a string." name="Validate String It should throw exception when argument is not a string." time="0">
    </testcase>
    <testcase classname="Validate String It should throw exception when argument is not a string." name="Validate String It should throw exception when argument is not a string." time="0.001">
    </testcase>
    <testcase classname="Validate String It should throw exception when argument is not included in allowed strings." name="Validate String It should throw exception when argument is not included in allowed strings." time="0">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided." name="Validate Integer it should not throw exception when valid integer is provided." time="0">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided." name="Validate Integer it should not throw exception when valid integer is provided." time="0.001">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided." name="Validate Integer it should not throw exception when valid integer is provided." time="0">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided with custom valid range." name="Validate Integer it should not throw exception when valid integer is provided with custom valid range." time="0">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided with custom valid range." name="Validate Integer it should not throw exception when valid integer is provided with custom valid range." time="0">
    </testcase>
    <testcase classname="Validate Integer it should not throw exception when valid integer is provided with custom valid range." name="Validate Integer it should not throw exception when valid integer is provided with custom valid range." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not a number." name="Validate Integer it should throw exception when argument is not a number." time="0.001">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not a number." name="Validate Integer it should throw exception when argument is not a number." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not a number." name="Validate Integer it should throw exception when argument is not a number." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not a number." name="Validate Integer it should throw exception when argument is not a number." time="0.001">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not an integer." name="Validate Integer it should throw exception when argument is not an integer." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not an integer." name="Validate Integer it should throw exception when argument is not an integer." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is not an integer." name="Validate Integer it should throw exception when argument is not an integer." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when invalid range is provided." name="Validate Integer it should throw exception when invalid range is provided." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when invalid range is provided." name="Validate Integer it should throw exception when invalid range is provided." time="0.001">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when invalid range is provided." name="Validate Integer it should throw exception when invalid range is provided." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is out of custom valid range." name="Validate Integer it should throw exception when argument is out of custom valid range." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is out of custom valid range." name="Validate Integer it should throw exception when argument is out of custom valid range." time="0">
    </testcase>
    <testcase classname="Validate Integer it should throw exception when argument is out of custom valid range." name="Validate Integer it should throw exception when argument is out of custom valid range." time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Game play" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.238" tests="9">
    <testcase classname="Game play It should set one player mark correctly." name="Game play It should set one player mark correctly." time="0.019">
    </testcase>
    <testcase classname="Game play It should set player mark for both players correctly." name="Game play It should set player mark for both players correctly." time="0.008">
    </testcase>
    <testcase classname="Game play It should display draw when no player wins the game." name="Game play It should display draw when no player wins the game." time="0.008">
    </testcase>
    <testcase classname="Game play It should display player victory when player wins the game." name="Game play It should display player victory when player wins the game." time="0.008">
    </testcase>
    <testcase classname="Game play It should display player victory when player wins the game." name="Game play It should display player victory when player wins the game." time="0.007">
    </testcase>
    <testcase classname="Game play It should not add more symbols after the game is finished." name="Game play It should not add more symbols after the game is finished." time="0.006">
    </testcase>
    <testcase classname="Game play It should not add more symbols after the game is finished." name="Game play It should not add more symbols after the game is finished." time="0.007">
    </testcase>
    <testcase classname="Game play It should not change symbol when element is clicked twice." name="Game play It should not change symbol when element is clicked twice." time="0.003">
    </testcase>
    <testcase classname="Game play It should clean game board when restart button is pressed but must keep game history." name="Game play It should clean game board when restart button is pressed but must keep game history." time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Game UI creation" errors="0" failures="0" skipped="0" timestamp="2021-02-18T01:58:05" time="1.269" tests="30">
    <testcase classname="Game UI creation it should not throw exception when valid arguments are provided." name="Game UI creation it should not throw exception when valid arguments are provided." time="0.01">
    </testcase>
    <testcase classname="Game UI creation it should not throw exception when valid arguments are provided." name="Game UI creation it should not throw exception when valid arguments are provided." time="0.006">
    </testcase>
    <testcase classname="Game UI creation It should throw exception when invalid arguments are provided." name="Game UI creation It should throw exception when invalid arguments are provided." time="0.006">
    </testcase>
    <testcase classname="Game UI creation It should throw exception when invalid arguments are provided." name="Game UI creation It should throw exception when invalid arguments are provided." time="0.001">
    </testcase>
    <testcase classname="Game UI creation It should throw exception when invalid arguments are provided." name="Game UI creation It should throw exception when invalid arguments are provided." time="0">
    </testcase>
    <testcase classname="Game UI creation It should throw exception when invalid arguments are provided." name="Game UI creation It should throw exception when invalid arguments are provided." time="0.001">
    </testcase>
    <testcase classname="Game UI creation It should throw exception when invalid arguments are provided." name="Game UI creation It should throw exception when invalid arguments are provided." time="0">
    </testcase>
    <testcase classname="Draw end game line It should draw horizontal line for given horizontal orientation." name="Draw end game line It should draw horizontal line for given horizontal orientation." time="0.009">
    </testcase>
    <testcase classname="Draw end game line It should draw horizontal line for given horizontal orientation." name="Draw end game line It should draw horizontal line for given horizontal orientation." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should draw horizontal line for given horizontal orientation." name="Draw end game line It should draw horizontal line for given horizontal orientation." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should draw vertical line for given vertical orientation." name="Draw end game line It should draw vertical line for given vertical orientation." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should draw vertical line for given vertical orientation." name="Draw end game line It should draw vertical line for given vertical orientation." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should draw vertical line for given vertical orientation." name="Draw end game line It should draw vertical line for given vertical orientation." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should draw diagonal line for given diagonal orientation." name="Draw end game line It should draw diagonal line for given diagonal orientation." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should draw diagonal line for given diagonal orientation." name="Draw end game line It should draw diagonal line for given diagonal orientation." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when empty winning combination is provided." name="Draw end game line It should throw type error when empty winning combination is provided." time="0.006">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when empty winning combination is provided." name="Draw end game line It should throw type error when empty winning combination is provided." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when empty winning combination is provided." name="Draw end game line It should throw type error when empty winning combination is provided." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown orientation is provided." name="Draw end game line It should throw type error when unknown orientation is provided." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown orientation is provided." name="Draw end game line It should throw type error when unknown orientation is provided." time="0.004">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown orientation is provided." name="Draw end game line It should throw type error when unknown orientation is provided." time="0.004">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown orientation is provided." name="Draw end game line It should throw type error when unknown orientation is provided." time="0.003">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown sequence is provided." name="Draw end game line It should throw type error when unknown sequence is provided." time="0.004">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown sequence is provided." name="Draw end game line It should throw type error when unknown sequence is provided." time="0.002">
    </testcase>
    <testcase classname="Draw end game line It should throw type error when unknown sequence is provided." name="Draw end game line It should throw type error when unknown sequence is provided." time="0.002">
    </testcase>
    <testcase classname="Set game info It should set text value." name="Set game info It should set text value." time="0.002">
    </testcase>
    <testcase classname="Set game info It should set text value." name="Set game info It should set text value." time="0.002">
    </testcase>
    <testcase classname="Set game info It should set text value." name="Set game info It should set text value." time="0.003">
    </testcase>
    <testcase classname="Set game history It should set game history." name="Set game history It should set game history." time="0.002">
    </testcase>
    <testcase classname="Clean game board It should clean game board." name="Clean game board It should clean game board." time="0.002">
    </testcase>
  </testsuite>
</testsuites>